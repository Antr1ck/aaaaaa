#include <iostream>

using namespace std;

template <typename T1, typename T2>
class Base 
{
protected:
    T1 value1;
    T2 value2;

public:
    Base(T1 value1, T2 value2) : value1{ value1 }, value2{ value2 } {}

    virtual ~Base() {}

    void display() const 
    {
        cout << "value1: " << value1 << "value2: " << value2;
    }
};

template <typename T1, typename T2, typename T3, typename T4>
class Child : public Base<T1, T2> 
{
private:
    T3 value3;
    T4 value4;

public:
    Child(T1 value1, T2 value2, T3 value3, T4 value4) : Base<T1, T2>{ value1, value2 }, value3{ value3 }, value4{ value4 } {}

    ~Child() {}

    void function() const 
    {
        Base<T1, T2>::display();
        cout << "value3: " << value3 << "value4: " << value4;
    }
};

template <typename T1, typename T2, typename T5, typename T6>
class Child2 : public Base<T1, T2> 
{
private:
    T5 value5;
    T6 value6;

public:
    Child2(T1 value1, T2 value2, T5 value5, T6 value6) : Base<T1, T2>{ value1, value2 }, value5{ value5 }, value6{ value6 } {}

    ~Child2() {}

    void function() const 
    {
        Base<T1, T2>::display();
        cout << "value5: " << value5 << "value6: " << value6;
    }
}
